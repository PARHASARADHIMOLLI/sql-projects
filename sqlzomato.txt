-- Users Table
CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    user_name VARCHAR(50),
    user_email VARCHAR(100),
    user_phone VARCHAR(15)
);

INSERT INTO Users (user_id, user_name, user_email, user_phone) VALUES
(1, 'Alice', 'alice@example.com', '1234567890'),
(2, 'Bob', 'bob@example.com', '0987654321'),
(3, 'Charlie', 'charlie@example.com', '5678901234'),
(4, 'David', 'david@example.com', '6789012345');

-- Menu Table
CREATE TABLE Menu (
    menu_id INT PRIMARY KEY,
    item_name VARCHAR(100),
    item_price DECIMAL(10, 2)
);

INSERT INTO Menu (menu_id, item_name, item_price) VALUES
(1, 'Margherita Pizza', 10.99),
(2, 'Pepperoni Pizza', 12.99),
(3, 'Cheeseburger', 8.99),
(4, 'Veggie Burger', 7.99),
(5, 'French Fries', 3.99),
(6, 'Coke', 1.99);

-- Orders Table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    user_id INT,
    menu_id INT,
    order_date DATETIME,
    quantity INT,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (menu_id) REFERENCES Menu(menu_id)
);

INSERT INTO Orders (order_id, user_id, menu_id, order_date, quantity, total_amount) VALUES
(1, 1, 1, '2024-06-13 12:30:00', 2, 21.98),
(2, 2, 3, '2024-06-14 18:45:00', 1, 8.99),
(3, 3, 2, '2024-06-15 13:00:00', 1, 12.99),
(4, 1, 4, '2024-06-15 14:00:00', 1, 7.99),
(5, 4, 5, '2024-06-16 11:00:00', 3, 11.97),
(6, 3, 6, '2024-06-16 11:30:00', 2, 3.98),
(7, 2, 1, '2024-06-17 12:00:00', 1, 10.99),
(8, 4, 2, '2024-06-17 12:15:00', 2, 25.98);

-- Queries

-- List all users
SELECT * FROM Users;

-- List the menu
SELECT * FROM Menu;

-- Place a new order
INSERT INTO Orders (order_id, user_id, menu_id, order_date, quantity, total_amount)
VALUES (9, 2, 5, '2024-06-18 13:00:00', 2, 7.98);

-- Get all orders for a specific user
SELECT * FROM Orders WHERE user_id = 1;

-- Get the total amount spent by a user
SELECT user_id, SUM(total_amount) AS total_spent
FROM Orders
WHERE user_id = 1
GROUP BY user_id;

-- Find the most popular menu item
SELECT menu_id, SUM(quantity) AS total_ordered
FROM Orders
GROUP BY menu_id
ORDER BY total_ordered DESC
LIMIT 1;

-- Get the list of orders along with user details
SELECT o.order_id, o.order_date, o.quantity, o.total_amount,
       u.user_name, u.user_email, u.user_phone,
       m.item_name, m.item_price
FROM Orders o
JOIN Users u ON o.user_id = u.user_id
JOIN Menu m ON o.menu_id = m.menu_id;

-- Calculate the total sales
SELECT SUM(total_amount) AS total_sales
FROM Orders;

-- Get the number of orders for each user
SELECT user_id, COUNT(*) AS order_count
FROM Orders
GROUP BY user_id;

-- Get the average amount spent per order by each user
SELECT user_id, AVG(total_amount) AS avg_spent
FROM Orders
GROUP BY user_id;

-- Get the total number of items sold
SELECT SUM(quantity) AS total_items_sold
FROM Orders;

-- Find all orders made on a specific date
SELECT * FROM Orders
WHERE DATE(order_date) = '2024-06-15';

-- List users who have ordered more than a specific amount
SELECT u.user_id, u.user_name, SUM(o.total_amount) AS total_spent
FROM Users u
JOIN Orders o ON u.user_id = o.user_id
GROUP BY u.user_id, u.user_name
HAVING SUM(o.total_amount) > 20;

-- Find the menu items that have never been ordered
SELECT m.item_name
FROM Menu m
LEFT JOIN Orders o ON m.menu_id = o.menu_id
WHERE o.menu_id IS NULL;

-- Get the revenue generated from each menu item
SELECT m.item_name, SUM(o.total_amount) AS total_revenue
FROM Menu m
JOIN Orders o ON m.menu_id = o.menu_id
GROUP BY m.item_name;
